#!/usr/bin/env python

# Imported libraries
import sys

# Constants for the virtual memory program
FIFO = 0
IRU = 1
OPT = 2
MAX_TLB = 16
MAX_PAGES = 256
FRAMES = 256
DEFAULT_SCHED = 'FIFO'
MASK = 255
BYTE = 8
BACKING_STORE = 'BACKING_STORE.bin'

# This function takes arguments in and returns them in a format we can use.
# This assumes that all args are in the correct position
def ReturnArgs(args):
   filename = ''
   frames = FRAMES
   pra = DEFAULT_SCHED

   if len(args) > 0:
      filename = args[0]

      if len(args) == 3:
         frames = args[1]
         pra = args[2]
      elif len(args) == 2:
         if args[1].isdigit():
            frames = args[1]
         else:
            pra = args[1]

   return (filename, frames, pra)

# Opens the file passed in with a try except method. Takes all the data
# from that file and closes it.
# This also opens the backing store file
def OpenFiles(logAddress, filename):
   try:
      with open(filename, 'r') as file:
         for line in file:
            logAddress.append(int(line))

      file.close()
   except IOError as e:
      print 'I/O error, file does not exist'
      sys.exit()

   binFile = open(BACKING_STORE)

   return binFile

# Sets the scheduling type for physical memory and the tlb
def SetSched(pra):
   sched = FIFO

   if pra.upper() == 'IRU':
      sched = IRU
   elif pra.upper() == 'OPT':
      sched = OPT

   return sched

# Gets the page info as well as the offset of an address
def GetInfo(address):
   page = (MASK << BYTE & address) >> BYTE
   offset = MASK & address

   return (page, offset)

# Prints the data of the code to stdout
def PrintData():
   print 'end of code'

# Main function of the code. Will drive the functions in order to complete
# the fake virtual memory code
def main():
   args = sys.argv[1:]
   logAddress = []
   filename, frames, pra = ReturnArgs(args)  # Gives us all the arguments
   binFile = OpenFiles(logAddress, filename)

   sched = SetSched(pra)
#   buffer = TLB(sched)
#   pageTable = PageTable()
#   physicalMem = PhysicalMem(sched, frames)

   for address in logAddress:
      page, offset = GetInfo(address)

   binFile.close()
   PrintData()

# This makes sure that the main method will run
if __name__ == "__main__":
   main()

# End of Code
